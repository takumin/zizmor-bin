name: Version
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Tag version"
        default: ""
        required: false
        type: string
permissions: {}
jobs:
  version:
    name: Version / ${{ github.event.inputs.version || 'latest' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      BUILD_VERSION: ${{ github.event.inputs.version }}
    outputs:
      tagging: ${{ steps.tagging.outputs.version }}
    permissions:
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false
        sparse-checkout: |-
          .aqua
          tasks
    - name: Setup aqua
      uses: aquaproj/aqua-installer@5e54e5cee8a95ee2ce7c04cb993da6dfad13e59c # v3.1.2
      with:
        aqua_version: v2.51.1
    - name: Check valid version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash -euo pipefail {0}
      run: |-
        task version:check
    - name: Get build version
      id: version
      shell: bash -euo pipefail {0}
      run: |-
        echo "result=$(task build:version)" >> "$GITHUB_OUTPUT"
    - name: Show build version
      env:
        BUILD_VERSION: ${{ steps.version.outputs.result }}
      shell: bash -euo pipefail {0}
      run: |-
        echo "BUILD_VERSION: ${BUILD_VERSION}"
    - name: Check repository tag
      id: check_tag
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BUILD_VERSION: ${{ steps.version.outputs.result }}
      shell: bash -euo pipefail {0}
      run: |-
        gh api "repos/${GITHUB_REPOSITORY}/releases" --jq '.[].name' | rg "^${BUILD_VERSION}$"
    - name: Set tagging version
      id: tagging
      if: ${{ steps.check_tag.outcome == 'failure' }}
      shell: bash -euo pipefail {0}
      run: |-
        echo "version=${BUILD_VERSION}" >> "$GITHUB_OUTPUT"
  tagging:
    needs: [version]
    if: ${{ needs.version.outputs.tagging != '' }}
    name: Tagging / ${{ needs.version.outputs.tagging || 'unknown' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment:
      name: version
    env:
      TAG_VERSION: ${{ needs.version.outputs.tagging }}
    permissions:
      contents: read
      id-token: write
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false
        sparse-checkout: |-
          .aqua
    - name: Setup aqua
      uses: aquaproj/aqua-installer@5e54e5cee8a95ee2ce7c04cb993da6dfad13e59c # v3.1.2
      with:
        aqua_version: v2.51.1
    - name: Install tools
      shell: bash -euo pipefail {0}
      run: |-
        aqua i -t gh
        aqua i -t gitsign
    - name: Create GitHub App Token
      uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
      id: app-token
      with:
        app-id: ${{ vars.APP_ID }}
        private-key: ${{ secrets.PRIVATE_KEY }}
        permission-contents: write
    - name: Get GitHub App User ID
      id: get-user-id
      env:
        APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      shell: bash -euo pipefail {0}
      run: |-
        echo "user-id=$(gh api "/users/${APP_SLUG}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
    - name: Set Git User Config
      shell: bash -euo pipefail {0}
      env:
        APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        APP_USER_ID: ${{ steps.get-user-id.outputs.user-id }}
      run: |-
        git config --global user.name "${APP_SLUG}[bot]"
        git config --global user.email "${APP_USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com"
    - name: Setup gitsign
      shell: bash -euo pipefail {0}
      run: |-
        git config --global gpg.x509.program gitsign
        git config --global gpg.format x509
        git config --global commit.gpgsign true
        git config --global tag.gpgsign true
    - name: Tagging version
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      shell: bash -euo pipefail {0}
      run: |-
        git commit --allow-empty --message="${TAG_VERSION}"
        git tag -m "${TAG_VERSION}" "${TAG_VERSION}"
        git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}"
        git push --tags
