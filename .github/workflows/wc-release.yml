name: Release
on:
  workflow_call:
    inputs:
      build-version:
        default: ""
        required: false
        type: string
permissions: {}
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
jobs:
  release:
    name: ${{ inputs.build-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    env:
      BUILD_VERSION: ${{ inputs.build-version }}
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        path: dist/
        name: release-artifacts
    - name: Check artifacts
      shell: bash -euo pipefail {0}
      run: tree --charset ASCII dist/
    - name: Verify sha256sums
      shell: bash -euo pipefail {0}
      run: |-
        echo 'Verify sha256sums'
        cd dist
        sha256sum -c SHA256SUMS
    - name: Verify artifact attestation
      if: ${{ !startsWith(github.event_name, 'pull') }}
      shell: bash -euo pipefail {0}
      run: |-
        echo 'Verify artifact attestation'
        cd dist
        set -x
        for f in $(find . -type f -not -name '*.cert' -a -not -name '*.sig' -printf '%f\n' | sort); do
          gh attestation verify "$f" -R "${GITHUB_REPOSITORY}"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Setup cosign
      if: ${{ !startsWith(github.event_name, 'pull') }}
      uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
    - name: Verify code signing with cosign
      if: ${{ !startsWith(github.event_name, 'pull') }}
      env:
        CERTIFICATE_IDENTITY: >-
          ${{ github.server_url }}/${{ github.repository }}/.github/workflows/wc-sign.yml@${{ github.ref }}
        CERTIFICATE_OIDC_ISSUER: https://token.actions.githubusercontent.com
      shell: bash -euo pipefail {0}
      run: |-
        echo 'Verify code signing with cosign'
        cd dist
        set -x
        for f in $(find . -type f -not -name '*.cert' -a -not -name '*.sig' -printf '%f\n' | sort); do
          declare -a args
          args=("verify-blob" "$f")
          args+=("--certificate" "$f.cert")
          args+=("--signature" "$f.sig")
          args+=("--certificate-identity" "$CERTIFICATE_IDENTITY")
          args+=("--certificate-oidc-issuer" "$CERTIFICATE_OIDC_ISSUER")
          cosign "${args[@]}"
        done
    - name: Prepare release notes
      env:
        CERTIFICATE_IDENTITY: >-
          ${{ github.server_url }}/${{ github.repository }}/.github/workflows/wc-sign.yml@${{ github.ref }}
        CERTIFICATE_OIDC_ISSUER: https://token.actions.githubusercontent.com
      shell: bash -euo pipefail {0}
      run: |-
        echo 'Prepare release notes'
        BUILD_DATE="$(date +"%Y/%m/%d %I:%M:%S")"
        SHA256SUMS="$(cat dist/SHA256SUMS)"
        cat <<-__EOF__ | tee /tmp/release-note.txt
        The binaries were built automatically on GitHub Actions.
        When the build system changes, the binaries may change too.
        Please verify using SHA256SUMS or verify the signature using cosign.

        Build date: \`${BUILD_DATE}\`

        SHA256SUMS:
        \`\`\`checksum
        ${SHA256SUMS}
        \`\`\`

        GitHub Artifact Attestations:
        \`\`\`console
        $ gh attestation verify "[artifact path]"
        \`\`\`

        Cosign Verifying Signatures:
        \`\`\`console
        $ cosign verify-blob "[artifact path]" \\
            --certificate "[certificate path]" \\
            --signature "[signature path]" \\
            --certificate-identity \\
            "$CERTIFICATE_IDENTITY" \\
            --certificate-oidc-issuer \\
            "$CERTIFICATE_OIDC_ISSUER"
        \`\`\`

        See also: https://github.com/zizmorcore/zizmor/releases/tag/${BUILD_VERSION}
        __EOF__
    - name: "Create release"
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash -euo pipefail {0}
      run: |-
        gh release create -F /tmp/release-note.txt --draft --title "${BUILD_VERSION}" "${BUILD_VERSION}" dist/*
